/* =================================================================
/* SECTION Layout
================================================================= */
/* ==============================
/* SECTION Container System
** Containers allow for a robust and flexible layout system by
** applying the gutter padding and max width to the container itself.
** Containers can be nested as needed.
============================== */

/* Setup containers */

.container {
  margin-inline: auto;
  padding-inline: var(--space_gutter);
  max-width: var(--width_content);
}

.container--wide {
  margin-inline: auto;
  padding-inline: var(--space_gutter);
  max-width: var(--width_wide);
}

.container--full {
  margin-inline: auto;
  padding-inline: var(--space_gutter);
}

/* Allow nested containers wider than parent */

.container > .container--wide {
  max-width: var(--width_wide);
  margin-inline: calc(
    min(
      calc(100vw - 100%),
      calc(var(--width_wide) - 100%)
    ) / -2
  );
}

.container > .container--full,
.container--wide > .container--full {
  max-width: 100vw;
  margin-inline: calc((100vw - 100%) / -2);
}

/* Remove duplicate gutters from nested containers the same size as parent */

.container > .container,
.container--wide > .container--wide,
.container--full > .container--full {
  margin-inline: calc(var(--space_gutter) * -1);
}

/* Account for containers smaller than parent */

.container--wide > .container,
.container--full > .container {
  margin-inline: max(
    calc(var(--space_gutter) * -1),
    calc((100% - var(--width_content)) / 2)
  );
}

.container--full > .container--wide {
  margin-inline: max(
    calc(var(--space_gutter) * -1),
    calc((100% - var(--width_wide)) / 2)
  );
}

/* !SECTION Containers */
/* ==============================
/* SECTION Flow Spacing
** Flow spacing is the space between elements in a vertical flow.
** The .section class is provided for larger gaps between sections.
** Flow spacing can be applied to a individual container using the .layout--flow class. or to the entire document using the .global--flow class. The implementation is different for each method, so consider how you want the spacing to be applied.
============================== */

.layout--flow > * + *,
blockquote > * + *,
details > * + * {
  margin-block-start: var(--space_flow);
}

.layout--flow-double > * + * {
  margin-block-start: calc(var(--space_flow) * 2);
}

.layout--flow-half > * + * {
  margin-block-start: calc(var(--space_flow) / 2);
}

.layout--flow > * + h1,
.layout--flow > * + h2,
.layout--flow > * + h3,
.layout--flow > * + h4,
.layout--flow > * + h5,
.layout--flow > * + h6 {
  margin-block-start: calc(var(--space_flow) * 2);
}

.layout--flow > h1 + h2,
.layout--flow > h2 + h3,
.layout--flow > h3 + h4,
.layout--flow > h4 + h5,
.layout--flow > h5 + h6 {
  margin-block-start: calc(var(--space_flow) / 2);
}

.section {
  margin-block-start: var(--space_section);
}

/* !SECTION Flow Spacing */
/* ==============================
/* SECTION Level
** Creates a bar with content vertically aligned on both sides
** Good for split navigation bars etc.
============================== */

.layout--level {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-content: center;
  gap: var(--space_gutter);
}

/* !SECTION Level */
/* ==============================
/* SECTION Grid
** The grid layout creates a responsive grid with a fluid number of columns.
** You can define the number of columns to allow as well as the minimum
** width of each grid item. Just be aware that if you set the minimum width
** too high, the grid may not fit on viewports smaller than the minimum width.
============================== */

.layout--grid {
  --grid-column--count: 6;
  --grid-gap--width: var(--space_grid-gap);
  --grid-gap--count: calc(var(--grid-column--count) - 1);
  --grid-gap--total: calc(var(--grid-gap--width) * var(--grid-gap--count));
  --grid-item--min-width: 14rem;
  --grid-item--max-width: calc((100% - var(--grid-gap--total)) / var(--grid-column--count));

  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));
  gap: var(--grid-gap--width);
}

/* Stabilize height of components that are side by side */

.layout--grid > div > :only-child,
.layout--grid > li > :only-child {
  display: flex;
  align-items: stretch;
  height: 100%;
}

.layout--grid > div > :only-child > *,
.layout--grid > li > :only-child > * {
  flex: 1;
}

/* !SECTION Grid */
/* ==============================
/* SECTION App
** The app wrapper ensures the the site footer sticks to the
** bottom of the viewport on short pages.
** Structure should be as follows:
** <div id="app">
**   <header></header>
**   <main></main>
**   <footer></footer>
** </div>
** No other elements should be present in the app div.
============================== */

#app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  max-width: 100vw;
}

#app > :nth-child(2) {
  width: 100%;
  flex: 1 0 auto;
  place-content: start center;
}

/* !SECTION App */
/* ==============================
/* SECTION Page Layout
** The page layout provides grid areas for a hero, content, and sidebar.
** It arranges the grid areas responsively based on the presence of a sidebar.
** Inside the <main class="page"> tag, the structure should follow:
** <div class="page_header"> (optional, may use header element)
** <div class="page_content"> (may use article element)
** <div class="page_sidebar"> (optional, may use aside or nav elements)
============================== */

.page {
  display: grid;
  grid-template-areas:
    "header"
    "content"
    "sidebar";
  grid-template-columns: 1fr;
  column-gap: var(--space_layout-gap);
  max-width: var(--width_wide);
  margin-inline: auto;
}

/* Fix for x overflow elements breaking layout */

.page > * {
  min-width: 0;
}

/* Page areas */

.page__header {
  grid-area: header;
}

.page__content {
  grid-area: content;
  margin-block: var(--space_section);
}

.page__sidebar {
  grid-area: sidebar;
  margin-block-end: var(--space_section);
}

/* Layout fixes */

.page:has(.page__sidebar) .container > .container--wide,
.page:has(.page__sidebar) .container > .container--full,
.page:has(.page__sidebar) .container--wide > .container,
.page:has(.page__sidebar) .container--wide > .container--full,
.page:has(.page__sidebar) .container--full > .container,
.page:has(.page__sidebar) .container--full > .container--wide {
  margin-inline: calc(var(--space_gutter) * -1);
}

.page:not(:has(.page__sidebar)) .width--full,
.page:not(:has(.page__sidebar)) .container--full {
  width: 100vw;
  max-width: 100vw;
  margin-inline: calc((100vw - 100%) / -2);
}

/* Enable sidebar */

@media (min-width: 60rem) {
  .page:has(.page__sidebar) {
    grid-template-areas:
      "header header"
      "sidebar content";
    grid-template-columns:
      minmax(calc(25% - (var(--space_layout-gap) / 2)), var(--width_sidebar))
      min(calc(75% - (var(--space_layout-gap) / 2)), var(--width_content));
  }
  .page__sidebar {
    margin-block-start: var(--space_section);
  }
}

/* !SECTION Page Layout */
/* !SECTION Layout */
